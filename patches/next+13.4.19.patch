diff --git a/node_modules/next/dist/build/webpack-config.js b/node_modules/next/dist/build/webpack-config.js
index 61ccca0..fcc2950 100644
--- a/node_modules/next/dist/build/webpack-config.js
+++ b/node_modules/next/dist/build/webpack-config.js
@@ -140,9 +140,7 @@ const NEXT_PROJECT_ROOT = _path.default.join(__dirname, "..", "..");
 const NEXT_PROJECT_ROOT_DIST = _path.default.join(NEXT_PROJECT_ROOT, "dist");
 const NEXT_PROJECT_ROOT_DIST_CLIENT = _path.default.join(NEXT_PROJECT_ROOT_DIST, "client");
 const isWebpackServerLayer = (layer)=>Boolean(layer && _constants.WEBPACK_LAYERS.GROUP.server.includes(layer));
-if (parseInt(_react.default.version) < 18) {
-    throw new Error("Next.js requires react >= 18.2.0 to be installed.");
-}
+
 const babelIncludeRegexes = [
     /next[\\/]dist[\\/](esm[\\/])?shared[\\/]lib/,
     /next[\\/]dist[\\/](esm[\\/])?client/,
diff --git a/node_modules/next/dist/server/render.js b/node_modules/next/dist/server/render.js
index 9ee37d1..e6c3766 100644
--- a/node_modules/next/dist/server/render.js
+++ b/node_modules/next/dist/server/render.js
@@ -25,7 +25,7 @@ _export(exports, {
     }
 });
 const _react = /*#__PURE__*/ _interop_require_default(require("react"));
-const _serverbrowser = /*#__PURE__*/ _interop_require_default(require("react-dom/server.browser"));
+const _serverbrowser = /*#__PURE__*/ _interop_require_default(require("react-dom/server"));
 const _styledjsx = require("styled-jsx");
 const _constants = require("../lib/constants");
 const _constants1 = require("../shared/lib/constants");
@@ -682,7 +682,7 @@ async function renderToHTMLImpl(req, res, pathname, query, renderOpts, extra) {
                     if (renderShell) {
                         renderShell(App, Component);
                     }
-                    const html = await renderToString(/*#__PURE__*/ _react.default.createElement(Body, null, /*#__PURE__*/ _react.default.createElement(ErrorDebug, {
+                    const html = await _serverbrowser.default.renderToString(/*#__PURE__*/ _react.default.createElement(Body, null, /*#__PURE__*/ _react.default.createElement(ErrorDebug, {
                         error: ctx.err
                     })));
                     return {
@@ -704,7 +704,7 @@ async function renderToHTMLImpl(req, res, pathname, query, renderOpts, extra) {
                         };
                     });
                 }
-                const html = await renderToString(/*#__PURE__*/ _react.default.createElement(Body, null, /*#__PURE__*/ _react.default.createElement(AppContainerWithIsomorphicFiberStructure, null, renderPageTree(EnhancedApp, EnhancedComponent, {
+                const html = await _serverbrowser.default.renderToString(/*#__PURE__*/ _react.default.createElement(Body, null, /*#__PURE__*/ _react.default.createElement(AppContainerWithIsomorphicFiberStructure, null, renderPageTree(EnhancedApp, EnhancedComponent, {
                     ...props,
                     router
                 }))));
@@ -739,6 +739,43 @@ async function renderToHTMLImpl(req, res, pathname, query, renderOpts, extra) {
                 router
             })));
         };
+        if (!process.env.__NEXT_REACT_ROOT) {
+            // Enabling react legacy rendering mode: __NEXT_REACT_ROOT = false
+            if (Document.getInitialProps) {
+                const documentInitialProps = await loadDocumentInitialProps();
+                if (documentInitialProps === null) return null;
+                const { docProps  } = documentInitialProps;
+                return {
+                    bodyResult: (suffix)=>(0, _nodewebstreamshelper.streamFromArray)([
+                            docProps.html,
+                            suffix
+                        ]),
+                    documentElement: (htmlProps)=>/*#__PURE__*/ _react.default.createElement(Document, Object.assign({}, htmlProps, docProps)),
+                    head: docProps.head,
+                    headTags: [],
+                    styles: docProps.styles
+                };
+            } else {
+                const content = renderContent(App, Component);
+                // for non-concurrent rendering we need to ensure App is rendered
+                // before _document so that updateHead is called/collected before
+                // rendering _document's head
+                const result = _serverbrowser.default.renderToString(content);
+                const bodyResult = (suffix)=>(0, _nodewebstreamshelper.streamFromArray)([
+                        result,
+                        suffix
+                    ]);
+                const styles = jsxStyleRegistry.styles();
+                jsxStyleRegistry.flush();
+                return {
+                    bodyResult,
+                    documentElement: ()=>Document(),
+                    head,
+                    headTags: [],
+                    styles
+                };
+            }
+        } else {
         // Always using react concurrent rendering mode with required react version 18.x
         const renderShell = async (EnhancedApp, EnhancedComponent)=>{
             const content = renderContent(EnhancedApp, EnhancedComponent);
@@ -807,6 +844,7 @@ async function renderToHTMLImpl(req, res, pathname, query, renderOpts, extra) {
             styles
         };
     };
+};
     (_getTracer_getRootSpanAttributes = (0, _tracer.getTracer)().getRootSpanAttributes()) == null ? void 0 : _getTracer_getRootSpanAttributes.set("next.route", renderOpts.pathname);
     const documentResult = await (0, _tracer.getTracer)().trace(_constants2.RenderSpan.renderDocument, {
         spanName: `render route (pages) ${renderOpts.pathname}`,
@@ -891,7 +929,7 @@ async function renderToHTMLImpl(req, res, pathname, query, renderOpts, extra) {
     }, /*#__PURE__*/ _react.default.createElement(_htmlcontext.HtmlContext.Provider, {
         value: htmlProps
     }, documentResult.documentElement(htmlProps)));
-    const documentHTML = await (0, _tracer.getTracer)().trace(_constants2.RenderSpan.renderToString, async ()=>renderToString(document));
+    const documentHTML = await (0, _tracer.getTracer)().trace(_constants2.RenderSpan.renderToString, async ()=>_serverbrowser.default.renderToString(document));
     if (process.env.NODE_ENV !== "production") {
         const nonRenderedComponents = [];
         const expectedDocComponents = [
